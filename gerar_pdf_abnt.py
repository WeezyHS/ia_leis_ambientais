#!/usr/bin/env python3
"""
Gerador de PDF consolidado para normas ABNT ambientais
"""

import json
import re
from datetime import datetime
from pathlib import Path
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY

class ABNTPDFGenerator:
    """Gerador de PDF para normas ABNT"""
    
    def __init__(self, arquivo_json: str):
        self.arquivo_json = arquivo_json
        self.dados = self._carregar_dados()
        self.styles = getSampleStyleSheet()
        self._configurar_estilos()
        
    def _carregar_dados(self) -> list:
        """Carrega dados do arquivo JSON"""
        try:
            with open(self.arquivo_json, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"Erro ao carregar dados: {e}")
            return []
    
    def _configurar_estilos(self):
        """Configura estilos personalizados"""
        # T√≠tulo principal
        self.styles.add(ParagraphStyle(
            name='TituloPrincipal',
            parent=self.styles['Title'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.darkblue
        ))
        
        # Subt√≠tulo
        self.styles.add(ParagraphStyle(
            name='Subtitulo',
            parent=self.styles['Heading1'],
            fontSize=16,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.darkgreen
        ))
        
        # T√≠tulo de se√ß√£o
        self.styles.add(ParagraphStyle(
            name='TituloSecao',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceBefore=20,
            spaceAfter=12,
            textColor=colors.darkblue
        ))
        
        # C√≥digo da norma
        self.styles.add(ParagraphStyle(
            name='CodigoNorma',
            parent=self.styles['Heading3'],
            fontSize=12,
            spaceBefore=15,
            spaceAfter=8,
            textColor=colors.darkred,
            fontName='Helvetica-Bold'
        ))
        
        # Texto justificado
        self.styles.add(ParagraphStyle(
            name='TextoJustificado',
            parent=self.styles['Normal'],
            fontSize=10,
            alignment=TA_JUSTIFY,
            spaceAfter=8
        ))
    
    def _limpar_texto(self, texto: str) -> str:
        """Limpa e formata texto para o PDF"""
        if not texto:
            return "Texto n√£o dispon√≠vel"
        
        # Remover caracteres especiais problem√°ticos
        texto = re.sub(r'[^\w\s\-.,;:()!?√°√©√≠√≥√∫√¢√™√Æ√¥√ª√†√®√¨√≤√π√£√µ√ß√Å√â√ç√ì√ö√Ç√ä√é√î√õ√Ä√à√å√í√ô√É√ï√á]', '', texto)
        
        # Limitar tamanho
        if len(texto) > 1000:
            texto = texto[:1000] + "..."
        
        return texto.strip()
    
    def _gerar_capa(self) -> list:
        """Gera a capa do documento"""
        elementos = []
        
        # T√≠tulo principal
        titulo = Paragraph("NORMAS T√âCNICAS ABNT", self.styles['TituloPrincipal'])
        elementos.append(titulo)
        elementos.append(Spacer(1, 0.5*inch))
        
        # Subt√≠tulo
        subtitulo = Paragraph("Normas Ambientais Brasileiras", self.styles['Subtitulo'])
        elementos.append(subtitulo)
        elementos.append(Spacer(1, 0.3*inch))
        
        # Descri√ß√£o
        descricao = Paragraph(
            "Compila√ß√£o de normas t√©cnicas da Associa√ß√£o Brasileira de Normas T√©cnicas (ABNT) "
            "relacionadas ao meio ambiente, sustentabilidade e gest√£o ambiental.",
            self.styles['TextoJustificado']
        )
        elementos.append(descricao)
        elementos.append(Spacer(1, 0.5*inch))
        
        # Estat√≠sticas
        total_normas = len(self.dados)
        
        # Contar por categoria
        categorias = {}
        anos = {}
        for norma in self.dados:
            cat = norma.get('categoria', 'N√£o especificada')
            categorias[cat] = categorias.get(cat, 0) + 1
            
            ano = norma.get('ano', 'N/A')
            if ano and ano != 'N/A':
                anos[ano] = anos.get(ano, 0) + 1
        
        # Tabela de estat√≠sticas
        dados_tabela = [
            ['üìä ESTAT√çSTICAS GERAIS', ''],
            ['Total de Normas', str(total_normas)],
            ['', ''],
            ['üìã POR CATEGORIA', ''],
        ]
        
        for categoria, count in sorted(categorias.items()):
            dados_tabela.append([categoria, str(count)])
        
        if anos:
            dados_tabela.append(['', ''])
            dados_tabela.append(['üìÖ POR ANO (Top 5)', ''])
            for ano, count in sorted(anos.items(), key=lambda x: x[1], reverse=True)[:5]:
                dados_tabela.append([ano, str(count)])
        
        tabela = Table(dados_tabela, colWidths=[3*inch, 1*inch])
        tabela.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('BACKGROUND', (0, 3), (-1, 3), colors.lightgreen),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ]))
        
        elementos.append(tabela)
        elementos.append(Spacer(1, 0.5*inch))
        
        # Data de gera√ß√£o
        data_geracao = datetime.now().strftime("%d/%m/%Y √†s %H:%M")
        data_para = Paragraph(f"Documento gerado em: {data_geracao}", self.styles['Normal'])
        elementos.append(data_para)
        
        elementos.append(PageBreak())
        return elementos
    
    def _gerar_indice(self) -> list:
        """Gera √≠ndice das normas"""
        elementos = []
        
        titulo_indice = Paragraph("√çNDICE DE NORMAS", self.styles['TituloSecao'])
        elementos.append(titulo_indice)
        elementos.append(Spacer(1, 0.2*inch))
        
        # Ordenar normas por c√≥digo
        normas_ordenadas = sorted(self.dados, key=lambda x: x.get('codigo', ''))
        
        dados_indice = [['C√≥digo', 'T√≠tulo', 'Ano']]
        
        for i, norma in enumerate(normas_ordenadas):
            codigo = norma.get('codigo', 'N/A')
            titulo = norma.get('titulo', 'Sem t√≠tulo')
            ano = norma.get('ano', 'N/A')
            
            # Truncar t√≠tulo se muito longo
            if len(titulo) > 60:
                titulo = titulo[:60] + "..."
            
            dados_indice.append([codigo, titulo, ano])
        
        tabela_indice = Table(dados_indice, colWidths=[2*inch, 3.5*inch, 0.8*inch])
        tabela_indice.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ]))
        
        elementos.append(tabela_indice)
        elementos.append(PageBreak())
        
        return elementos
    
    def _gerar_normas(self) -> list:
        """Gera se√ß√£o com todas as normas"""
        elementos = []
        
        titulo_normas = Paragraph("NORMAS T√âCNICAS ABNT", self.styles['TituloSecao'])
        elementos.append(titulo_normas)
        elementos.append(Spacer(1, 0.2*inch))
        
        # Ordenar normas por c√≥digo
        normas_ordenadas = sorted(self.dados, key=lambda x: x.get('codigo', ''))
        
        for i, norma in enumerate(normas_ordenadas, 1):
            # C√≥digo da norma
            codigo = norma.get('codigo', 'N/A')
            codigo_para = Paragraph(f"{i}. {codigo}", self.styles['CodigoNorma'])
            elementos.append(codigo_para)
            
            # T√≠tulo
            titulo = self._limpar_texto(norma.get('titulo', 'Sem t√≠tulo'))
            titulo_para = Paragraph(f"<b>T√≠tulo:</b> {titulo}", self.styles['TextoJustificado'])
            elementos.append(titulo_para)
            
            # Metadados
            metadados = []
            
            status = norma.get('status', 'N/A')
            if status and status != 'N/A':
                metadados.append(f"<b>Status:</b> {status}")
            
            ano = norma.get('ano', 'N/A')
            if ano and ano != 'N/A':
                metadados.append(f"<b>Ano:</b> {ano}")
            
            categoria = norma.get('categoria', 'N/A')
            if categoria and categoria != 'N/A':
                metadados.append(f"<b>Categoria:</b> {categoria}")
            
            escopo = norma.get('escopo', 'N/A')
            if escopo and escopo != 'N/A':
                metadados.append(f"<b>Escopo:</b> {escopo}")
            
            comite = norma.get('comite', 'N/A')
            if comite and comite != 'N/A':
                metadados.append(f"<b>Comit√™:</b> {comite}")
            
            preco = norma.get('preco', 'N/A')
            if preco and preco != 'N/A':
                metadados.append(f"<b>Pre√ßo:</b> {preco}")
            
            if metadados:
                metadados_texto = " | ".join(metadados)
                metadados_para = Paragraph(metadados_texto, self.styles['TextoJustificado'])
                elementos.append(metadados_para)
            
            # Resumo/Descri√ß√£o
            resumo = norma.get('resumo', norma.get('text', ''))
            if resumo:
                resumo_limpo = self._limpar_texto(resumo)
                resumo_para = Paragraph(f"<b>Descri√ß√£o:</b> {resumo_limpo}", self.styles['TextoJustificado'])
                elementos.append(resumo_para)
            
            # Data de coleta
            data_coleta = norma.get('collected_at', 'N/A')
            if data_coleta and data_coleta != 'N/A':
                try:
                    # Tentar formatar a data
                    if 'T' in data_coleta:
                        data_obj = datetime.fromisoformat(data_coleta.replace('Z', '+00:00'))
                        data_formatada = data_obj.strftime("%d/%m/%Y")
                        data_para = Paragraph(f"<b>Data de coleta:</b> {data_formatada}", self.styles['TextoJustificado'])
                        elementos.append(data_para)
                except:
                    pass
            
            elementos.append(Spacer(1, 0.2*inch))
            
            # Quebra de p√°gina a cada 3 normas para melhor legibilidade
            if i % 3 == 0 and i < len(normas_ordenadas):
                elementos.append(PageBreak())
        
        return elementos
    
    def gerar_pdf(self) -> str:
        """Gera o PDF consolidado"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"ABNT_Normas_Ambientais_Consolidadas_{timestamp}.pdf"
        
        print(f"üìÑ Gerando PDF: {nome_arquivo}")
        
        # Criar documento
        pdf_doc = SimpleDocTemplate(
            nome_arquivo,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        
        # Construir conte√∫do
        elementos = []
        
        print("üìù Gerando capa...")
        elementos.extend(self._gerar_capa())
        
        print("üìã Gerando √≠ndice...")
        elementos.extend(self._gerar_indice())
        
        print("üìö Gerando normas...")
        elementos.extend(self._gerar_normas())
        
        # Construir PDF
        print("üî® Construindo PDF...")
        pdf_doc.build(elementos)
        
        # Verificar tamanho do arquivo
        arquivo_path = Path(nome_arquivo)
        if arquivo_path.exists():
            tamanho_mb = arquivo_path.stat().st_size / (1024 * 1024)
            print(f"‚úÖ PDF gerado com sucesso!")
            print(f"üìÅ Arquivo: {nome_arquivo}")
            print(f"üìä Tamanho: {tamanho_mb:.2f} MB")
            print(f"üìÑ Total de normas: {len(self.dados)}")
            
            return nome_arquivo
        else:
            raise Exception("Arquivo PDF n√£o foi criado")

def main():
    """Fun√ß√£o principal"""
    
    # Procurar arquivo JSON mais recente da ABNT
    arquivos_json = list(Path('.').glob('abnt_normas_ambientais_*.json'))
    
    if not arquivos_json:
        print("‚ùå Nenhum arquivo JSON da ABNT encontrado!")
        print("üí° Execute primeiro o script 'extrair_dados_abnt.py'")
        return
    
    # Usar o arquivo mais recente
    arquivo_mais_recente = max(arquivos_json, key=lambda x: x.stat().st_mtime)
    
    print("üîß GERADOR DE PDF - NORMAS ABNT")
    print("=" * 50)
    print(f"üìÇ Usando arquivo: {arquivo_mais_recente}")
    
    try:
        # Criar gerador e gerar PDF
        gerador = ABNTPDFGenerator(str(arquivo_mais_recente))
        
        if not gerador.dados:
            print("‚ùå Nenhum dado encontrado no arquivo JSON!")
            return
        
        nome_pdf = gerador.gerar_pdf()
        
        print("\nüéâ PROCESSO CONCLU√çDO COM SUCESSO!")
        print(f"üìñ O PDF consolidado das normas ABNT est√° pronto!")
        print(f"üìÅ Localiza√ß√£o: {nome_pdf}")
        
        # Estat√≠sticas finais
        total_normas = len(gerador.dados)
        categorias = {}
        for norma in gerador.dados:
            cat = norma.get('categoria', 'N√£o especificada')
            categorias[cat] = categorias.get(cat, 0) + 1
        
        print(f"\nüìä RESUMO FINAL:")
        print(f"   ‚Ä¢ Total de normas: {total_normas}")
        for categoria, count in sorted(categorias.items()):
            print(f"   ‚Ä¢ {categoria}: {count} normas")
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar PDF: {e}")

if __name__ == "__main__":
    main()